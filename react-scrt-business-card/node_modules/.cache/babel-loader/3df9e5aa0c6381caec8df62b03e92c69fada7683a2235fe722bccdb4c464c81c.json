{"ast":null,"code":"import { SecretNetworkClient, Wallet } from \"secretjs\";\nimport * as fs from \"fs\";\n\n//replace with your wallet seed\nconst wallet = new Wallet(\"hawk loyal creek exotic stick steel inspire donkey zoo slow index student\");\nconst wallet1 = new Wallet(\"empty creek remove toy nephew illness person omit drop fluid render drastic sorry rude dilemma announce magic suspect public inspire require jaguar broccoli trigger\");\nconst contract_wasm = fs.readFileSync(\"../contract.wasm\");\nconst secretjs = new SecretNetworkClient({\n  chainId: \"pulsar-2\",\n  url: \"https://api.pulsar.scrttestnet.com\",\n  wallet: wallet,\n  walletAddress: wallet.address\n});\n\n//console.log(secretjs);\n\nlet upload_contract = async () => {\n  try {\n    let tx = await secretjs.tx.compute.storeCode({\n      sender: wallet.address,\n      wasm_byte_code: contract_wasm,\n      source: \"\",\n      builder: \"\"\n    }, {\n      gasLimit: 4000000\n    });\n    const codeId = Number(tx.arrayLog.find(log => log.type === \"message\" && log.key === \"code_id\").value);\n    console.log(\"codeId: \", codeId);\n    const contractCodeHash = (await secretjs.query.compute.codeHashByCodeId({\n      code_id: codeId\n    })).code_hash;\n    console.log(`Contract hash: ${contractCodeHash}`);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n//upload_contract();\n\nlet contractCodeHash = \"8577aab4926b9a0fcb264c783ef25be728e0c0eba1811893569a8eb2421269a4\";\nlet codeId = 20729;\nlet contractAddress = \"secret19ttj98gk3ylmdg5gzrlt38rdtgslgyhrrxqcg4\";\nlet instantiate_contract = async (codeId, sender, contractCodeHash, init_msg, label) => {\n  // Create an instance of the Counter contract, providing a starting count\n  try {\n    const initMsg = {\n      entropy: \"this \"\n    };\n    let tx = await secretjs.tx.compute.instantiateContract({\n      code_id: codeId,\n      sender: sender,\n      code_hash: contractCodeHash,\n      init_msg: init_msg,\n      label: label\n    }, {\n      gasLimit: 400000\n    });\n\n    //Find the contract_address in the logs\n    //let arraylog1=tx.arrayLog;\n    const contractAddress = tx.arrayLog.find(log => log.type === \"message\" && log.key === \"contract_address\").value;\n    console.log(contractAddress);\n  } catch (err) {\n    console.error(err);\n  }\n};\n//instantiate_contract();\n\nlet createCard = async () => {\n  const card_creation_tx = await secretjs.tx.compute.executeContract({\n    sender: wallet.address,\n    contract_address: contractAddress,\n    msg: {\n      create: {\n        card: {\n          name: \"DElete me\",\n          address: \"DElete me \",\n          phone: \"12345678953\"\n        },\n        index: 1\n      }\n    },\n    code_hash: contractCodeHash\n  }, {\n    gasLimit: 100000\n  });\n  console.log(card_creation_tx);\n};\n//createCard();\n\nlet burnContract = async () => {\n  let burn_contract = await secretjs.tx.compute.executeContract({\n    sender: wallet.address,\n    contract_address: contractAddress,\n    msg: {\n      burn: {\n        index: 1\n      }\n    },\n    code_hash: contractCodeHash\n  }, {\n    gasLimit: 100000\n  });\n  console.log(burn_contract.arrayLog);\n};\n\n//burnContract();\n\nlet createViewingKey = async () => {\n  let viewing_key_creation = await secretjs.tx.compute.executeContract({\n    sender: wallet.address,\n    contract_address: contractAddress,\n    msg: {\n      generate_viewing_key: {\n        index: 1,\n        reciever: wallet1.address\n      }\n    },\n    code_hash: contractCodeHash\n  }, {\n    gasLimit: 100000\n  });\n  console.log(viewing_key_creation.arrayLog);\n};\n//createViewingKey();\n\nlet deleteViewingKey = async () => {\n  let viewing_key_delete = await secretjs.tx.compute.executeContract({\n    sender: wallet.address,\n    contract_address: contractAddress,\n    msg: {\n      delete_key: {\n        account: wallet1.address\n      }\n    },\n    code_hash: contractCodeHash\n  }, {\n    gasLimit: 100000\n  });\n  console.log(viewing_key_delete.arrayLog);\n};\n\n//deleteViewingKey();\n\nlet viewing_key = \"api_key_Uj0SCTkceMG+hoTVq8XkAoLZajaRdTf9t6q2/FmNRO4=\";\nlet queryCard = async () => {\n  let business_card_query_tx = await secretjs.query.compute.queryContract({\n    contract_address: contractAddress,\n    query: {\n      get_card: {\n        wallet: wallet1.address,\n        viewing_key: viewing_key,\n        index: 1\n      }\n    },\n    code_hash: contractCodeHash\n  });\n  console.log(business_card_query_tx);\n};\n//queryCard();\n\nlet bankTransfer = async () => {\n  let bank_tx = await secretjs.tx.bank.send({\n    amount: [{\n      amount: \"1000\",\n      denom: \"uscrt\"\n    }],\n    from_address: wallet.address,\n    to_address: wallet1.address // Set recipient to sender for testing\n  }, {\n    gasLimit: 20000,\n    gasPriceInFeeDenom: 0.25,\n    memo: \"send tokens \"\n  });\n  console.log(\"Transaction: \", bank_tx);\n};\nbankTransfer();\n\n//Get the codeInfo based on codeid\nconst codeInfo = await secretjs.query.compute.contractsByCodeId({\n  code_id: \"20622\"\n});\n//console.log(codeInfo)\n\n// current doubts: viewing keys should be the owner to see the information, other people use the same key should not see the information ? ---- problem solve !","map":{"version":3,"names":["SecretNetworkClient","Wallet","fs","wallet","wallet1","contract_wasm","readFileSync","secretjs","chainId","url","walletAddress","address","upload_contract","tx","compute","storeCode","sender","wasm_byte_code","source","builder","gasLimit","codeId","Number","arrayLog","find","log","type","key","value","console","contractCodeHash","query","codeHashByCodeId","code_id","code_hash","err","error","contractAddress","instantiate_contract","init_msg","label","initMsg","entropy","instantiateContract","createCard","card_creation_tx","executeContract","contract_address","msg","create","card","name","phone","index","burnContract","burn_contract","burn","createViewingKey","viewing_key_creation","generate_viewing_key","reciever","deleteViewingKey","viewing_key_delete","delete_key","account","viewing_key","queryCard","business_card_query_tx","queryContract","get_card","bankTransfer","bank_tx","bank","send","amount","denom","from_address","to_address","gasPriceInFeeDenom","memo","codeInfo","contractsByCodeId"],"sources":["/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/components/backend.js"],"sourcesContent":["import { SecretNetworkClient, Wallet } from \"secretjs\";\nimport * as fs from \"fs\";\n\n//replace with your wallet seed\nconst wallet = new Wallet(\"hawk loyal creek exotic stick steel inspire donkey zoo slow index student\");\nconst wallet1 = new Wallet(\"empty creek remove toy nephew illness person omit drop fluid render drastic sorry rude dilemma announce magic suspect public inspire require jaguar broccoli trigger\");\n\nconst contract_wasm = fs.readFileSync(\"../contract.wasm\");\n\nconst secretjs = new SecretNetworkClient({\n  chainId: \"pulsar-2\",\n  url: \"https://api.pulsar.scrttestnet.com\",\n  wallet: wallet,\n  walletAddress: wallet.address,\n});\n\n//console.log(secretjs);\n\nlet upload_contract = async () => {\ntry{\n  let tx = await secretjs.tx.compute.storeCode(\n    {\n      sender: wallet.address,\n      wasm_byte_code: contract_wasm,\n      source: \"\",\n      builder: \"\",\n    },\n    {\n      gasLimit: 4_000_000,\n    }\n  );\n\n  const codeId = Number(\n    tx.arrayLog.find((log) => log.type === \"message\" && log.key === \"code_id\")\n      .value\n  );\n\n  console.log(\"codeId: \", codeId);\n\n  const contractCodeHash = (\n    await secretjs.query.compute.codeHashByCodeId({ code_id: codeId })\n  ).code_hash;\n  console.log(`Contract hash: ${contractCodeHash}`);\n}\ncatch (err){\n\nconsole.error(err);\n}\n\n\n};\n\n//upload_contract();\n\nlet contractCodeHash=\"8577aab4926b9a0fcb264c783ef25be728e0c0eba1811893569a8eb2421269a4\";\nlet codeId=20729;\nlet contractAddress=\"secret19ttj98gk3ylmdg5gzrlt38rdtgslgyhrrxqcg4\"\nlet instantiate_contract = async (codeId,sender,contractCodeHash,init_msg,label) => {\n  // Create an instance of the Counter contract, providing a starting count\n  try{\n\n  const initMsg = { entropy: \"this \" };\n  let tx = await secretjs.tx.compute.instantiateContract(\n    {\n      code_id: codeId,\n      sender: sender,\n      code_hash: contractCodeHash,\n      init_msg: init_msg,\n      label: label ,\n    },\n    {\n      gasLimit: 400_000,\n    }\n  );\n\n  //Find the contract_address in the logs\n  //let arraylog1=tx.arrayLog;\n  const contractAddress = tx.arrayLog.find(\n    (log) => log.type === \"message\" && log.key === \"contract_address\"\n  ).value;\n  \n  \n  \n\n\n  console.log(contractAddress);\n  }\n  catch(err){\n  console.error(err);\n  }\n};\n//instantiate_contract();\n\n\n\n\n\n\nlet createCard = async () => {\n\n  const card_creation_tx = await secretjs.tx.compute.executeContract(\n    {\n      sender: wallet.address,\n      contract_address: contractAddress,\n      msg: {\n        create: {\n          card: {\n            name: \"DElete me\",\n            address: \"DElete me \",\n            phone: \"12345678953\",\n          },\n          index: 1,\n        },\n      },\n      code_hash: contractCodeHash,\n    },\n    { gasLimit: 100_000 }\n  );\n\n  console.log(card_creation_tx);\n};\n//createCard();\n\n\nlet burnContract = async () => {\n  let burn_contract = await secretjs.tx.compute.executeContract(\n    {\n      sender: wallet.address,\n      contract_address: contractAddress,\n      msg: {\n      burn:{\n       index:1\n       }\n      },\n      code_hash: contractCodeHash,\n    },\n    { gasLimit: 100_000 }\n  );\n\n  console.log(\n    burn_contract.arrayLog\n  );\n};\n\n//burnContract();\n\n\nlet createViewingKey = async () => {\n  let viewing_key_creation = await secretjs.tx.compute.executeContract(\n    {\n      sender: wallet.address,\n      contract_address: contractAddress,\n      msg: {\n        generate_viewing_key: {\n          index: 1,\n          reciever:wallet1.address\n          \n        },\n      },\n      code_hash: contractCodeHash,\n    },\n    { gasLimit: 100_000 }\n  );\n\n  console.log(\n    viewing_key_creation.arrayLog\n  );\n};\n//createViewingKey();\n\nlet deleteViewingKey =async () => {\n  let viewing_key_delete = await secretjs.tx.compute.executeContract(\n    {\n      sender: wallet.address,\n      contract_address: contractAddress,\n      msg: {\n        delete_key: {\n         \n          account:wallet1.address\n          \n        },\n      },\n      code_hash: contractCodeHash,\n    },\n    { gasLimit: 100_000 }\n  );\n\n  console.log(\n    viewing_key_delete.arrayLog\n  );\n};\n\n\n//deleteViewingKey();\n\n\n\n\nlet viewing_key=\"api_key_Uj0SCTkceMG+hoTVq8XkAoLZajaRdTf9t6q2/FmNRO4=\";\n\n\nlet queryCard = async () => {\nlet business_card_query_tx=await secretjs.query.compute.queryContract({\n\tcontract_address:contractAddress,\n\tquery:{\n\t\tget_card:{\n\t\t\twallet:wallet1.address,\n\t\t\tviewing_key:viewing_key,\n\t\t\tindex:1,\n\t\t\t\n\t\t},\n\t\t\n\t\n\t},\n\tcode_hash:contractCodeHash,\n\t\n});\nconsole.log(business_card_query_tx);\n  \n};\n//queryCard();\n\n\nlet bankTransfer = async () => {\nlet bank_tx = await secretjs.tx.bank.send(\n    {\n      amount: [{ amount: \"1000\", denom: \"uscrt\" }],\n      from_address: wallet.address,\n      to_address: wallet1.address, // Set recipient to sender for testing\n    },\n    {\n      gasLimit: 20_000,\n      gasPriceInFeeDenom: 0.25,\n      memo: \"send tokens \",\n    }\n  );\n\n  console.log(\"Transaction: \", bank_tx);\n};\n\nbankTransfer();\n\n\n\n//Get the codeInfo based on codeid\nconst codeInfo = await secretjs.query.compute.contractsByCodeId({code_id:\"20622\"});\n//console.log(codeInfo)\n\n// current doubts: viewing keys should be the owner to see the information, other people use the same key should not see the information ? ---- problem solve !\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}