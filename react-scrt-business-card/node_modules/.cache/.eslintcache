[{"/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/index.js":"1","/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/App.js":"2","/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/components/Navbar.js":"3","/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/pages/Home.js":"4","/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/pages/MyCards.js":"5","/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/components/CreateCard.js":"6","/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/backend.js":"7","/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/components/backend.js":"8"},{"size":347,"mtime":1681034173716,"results":"9","hashOfConfig":"10"},{"size":8189,"mtime":1681392259605,"results":"11","hashOfConfig":"10"},{"size":3907,"mtime":1681034173716,"results":"12","hashOfConfig":"10"},{"size":449,"mtime":1681034173716,"results":"13","hashOfConfig":"10"},{"size":5083,"mtime":1681387106689,"results":"14","hashOfConfig":"10"},{"size":6433,"mtime":1681388332475,"results":"15","hashOfConfig":"10"},{"size":5203,"mtime":1681381613374,"results":"16","hashOfConfig":"10"},{"size":5203,"mtime":1681381688450,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3t7eyq",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":1,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/index.js",[],[],"/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/App.js",["46","47","48","49","50","51","52"],[],"/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/components/Navbar.js",[],[],"/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/pages/Home.js",[],[],"/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/pages/MyCards.js",["53","54","55"],[],"/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/components/CreateCard.js",["56","57","58","59","60"],[],"/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/backend.js",["61","62","63","64","65","66","67","68","69","70","71"],[],"import { SecretNetworkClient, Wallet } from \"secretjs\";\nimport * as fs from \"fs\";\n\n//replace with your wallet seed\nconst wallet = new Wallet(\"hawk loyal creek exotic stick steel inspire donkey zoo slow index student\");\nconst wallet1 = new Wallet(\"empty creek remove toy nephew illness person omit drop fluid render drastic sorry rude dilemma announce magic suspect public inspire require jaguar broccoli trigger\");\n\nconst contract_wasm = fs.readFileSync(\"../contract.wasm\");\n\nconst secretjs = new SecretNetworkClient({\n  chainId: \"pulsar-2\",\n  url: \"https://api.pulsar.scrttestnet.com\",\n  wallet: wallet,\n  walletAddress: wallet.address,\n});\n\n//console.log(secretjs);\n\nlet upload_contract = async () => {\ntry{\n  let tx = await secretjs.tx.compute.storeCode(\n    {\n      sender: wallet.address,\n      wasm_byte_code: contract_wasm,\n      source: \"\",\n      builder: \"\",\n    },\n    {\n      gasLimit: 4_000_000,\n    }\n  );\n\n  const codeId = Number(\n    tx.arrayLog.find((log) => log.type === \"message\" && log.key === \"code_id\")\n      .value\n  );\n\n  console.log(\"codeId: \", codeId);\n\n  const contractCodeHash = (\n    await secretjs.query.compute.codeHashByCodeId({ code_id: codeId })\n  ).code_hash;\n  console.log(`Contract hash: ${contractCodeHash}`);\n}\ncatch (err){\n\nconsole.error(err);\n}\n\n\n};\n\n//upload_contract();\n\nlet contractCodeHash=\"8577aab4926b9a0fcb264c783ef25be728e0c0eba1811893569a8eb2421269a4\";\nlet codeId=20729;\nlet contractAddress=\"secret19ttj98gk3ylmdg5gzrlt38rdtgslgyhrrxqcg4\"\nlet instantiate_contract = async (codeId,sender,contractCodeHash,init_msg,label) => {\n  // Create an instance of the Counter contract, providing a starting count\n  try{\n\n  const initMsg = { entropy: \"this \" };\n  let tx = await secretjs.tx.compute.instantiateContract(\n    {\n      code_id: codeId,\n      sender: sender,\n      code_hash: contractCodeHash,\n      init_msg: init_msg,\n      label: label ,\n    },\n    {\n      gasLimit: 400_000,\n    }\n  );\n\n  //Find the contract_address in the logs\n  //let arraylog1=tx.arrayLog;\n  const contractAddress = tx.arrayLog.find(\n    (log) => log.type === \"message\" && log.key === \"contract_address\"\n  ).value;\n  \n  \n  \n\n\n  console.log(contractAddress);\n  }\n  catch(err){\n  console.error(err);\n  }\n};\n//instantiate_contract();\n\n\n\n\n\n\nlet createCard = async () => {\n\n  const card_creation_tx = await secretjs.tx.compute.executeContract(\n    {\n      sender: sender,\n      contract_address: contractAddress,\n      msg: {\n        create: {\n          card: {\n            name: \"DElete me\",\n            address: \"DElete me \",\n            phone: \"12345678953\",\n          },\n          index: 1,\n        },\n      },\n      code_hash: contractCodeHash,\n    },\n    { gasLimit: 100_000 }\n  );\n\n  console.log(card_creation_tx);\n};\n//createCard();\n\n\nlet burnContract = async () => {\n  let burn_contract = await secretjs.tx.compute.executeContract(\n    {\n      sender: wallet.address,\n      contract_address: contractAddress,\n      msg: {\n      burn:{\n       index:1\n       }\n      },\n      code_hash: contractCodeHash,\n    },\n    { gasLimit: 100_000 }\n  );\n\n  console.log(\n    burn_contract.arrayLog\n  );\n};\n\n//burnContract();\n\n\nlet createViewingKey = async () => {\n  let viewing_key_creation = await secretjs.tx.compute.executeContract(\n    {\n      sender: wallet.address,\n      contract_address: contractAddress,\n      msg: {\n        generate_viewing_key: {\n          index: 1,\n          reciever:wallet1.address\n          \n        },\n      },\n      code_hash: contractCodeHash,\n    },\n    { gasLimit: 100_000 }\n  );\n\n  console.log(\n    viewing_key_creation.arrayLog\n  );\n};\n//createViewingKey();\n\nlet deleteViewingKey =async () => {\n  let viewing_key_delete = await secretjs.tx.compute.executeContract(\n    {\n      sender: wallet.address,\n      contract_address: contractAddress,\n      msg: {\n        delete_key: {\n         \n          account:wallet1.address\n          \n        },\n      },\n      code_hash: contractCodeHash,\n    },\n    { gasLimit: 100_000 }\n  );\n\n  console.log(\n    viewing_key_delete.arrayLog\n  );\n};\n\n\n//deleteViewingKey();\n\n\n\n\nlet viewing_key=\"api_key_Uj0SCTkceMG+hoTVq8XkAoLZajaRdTf9t6q2/FmNRO4=\";\n\n\nlet queryCard = async () => {\nlet business_card_query_tx=await secretjs.query.compute.queryContract({\n\tcontract_address:contractAddress,\n\tquery:{\n\t\tget_card:{\n\t\t\twallet:wallet1.address,\n\t\t\tviewing_key:viewing_key,\n\t\t\tindex:1,\n\t\t\t\n\t\t},\n\t\t\n\t\n\t},\n\tcode_hash:contractCodeHash,\n\t\n});\nconsole.log(business_card_query_tx);\n  \n};\n//queryCard();\n\n\nlet bankTransfer = async () => {\nlet bank_tx = await secretjs.tx.bank.send(\n    {\n      amount: [{ amount: \"1000\", denom: \"uscrt\" }],\n      from_address: wallet.address,\n      to_address: wallet1.address, // Set recipient to sender for testing\n    },\n    {\n      gasLimit: 20_000,\n      gasPriceInFeeDenom: 0.25,\n      memo: \"send tokens \",\n    }\n  );\n\n  console.log(\"Transaction: \", bank_tx);\n};\n\nbankTransfer();\n\n\n\n//Get the codeInfo based on codeid\nconst codeInfo = await secretjs.query.compute.contractsByCodeId({code_id:\"20622\"});\n//console.log(codeInfo)\n\n// current doubts: viewing keys should be the owner to see the information, other people use the same key should not see the information ? ---- problem solve !\n\n",[],"/home/ubuntu/Documents/testing_github/secret-business-card-workshop/react-scrt-business-card/src/components/backend.js",["72","73","74","75","76","77","78","79","80","81"],[],"import { SecretNetworkClient, Wallet } from \"secretjs\";\nimport * as fs from \"fs\";\n\n//replace with your wallet seed\nconst wallet = new Wallet(\"hawk loyal creek exotic stick steel inspire donkey zoo slow index student\");\nconst wallet1 = new Wallet(\"empty creek remove toy nephew illness person omit drop fluid render drastic sorry rude dilemma announce magic suspect public inspire require jaguar broccoli trigger\");\n\nconst contract_wasm = fs.readFileSync(\"../contract.wasm\");\n\nconst secretjs = new SecretNetworkClient({\n  chainId: \"pulsar-2\",\n  url: \"https://api.pulsar.scrttestnet.com\",\n  wallet: wallet,\n  walletAddress: wallet.address,\n});\n\n//console.log(secretjs);\n\nlet upload_contract = async () => {\ntry{\n  let tx = await secretjs.tx.compute.storeCode(\n    {\n      sender: wallet.address,\n      wasm_byte_code: contract_wasm,\n      source: \"\",\n      builder: \"\",\n    },\n    {\n      gasLimit: 4_000_000,\n    }\n  );\n\n  const codeId = Number(\n    tx.arrayLog.find((log) => log.type === \"message\" && log.key === \"code_id\")\n      .value\n  );\n\n  console.log(\"codeId: \", codeId);\n\n  const contractCodeHash = (\n    await secretjs.query.compute.codeHashByCodeId({ code_id: codeId })\n  ).code_hash;\n  console.log(`Contract hash: ${contractCodeHash}`);\n}\ncatch (err){\n\nconsole.error(err);\n}\n\n\n};\n\n//upload_contract();\n\nlet contractCodeHash=\"8577aab4926b9a0fcb264c783ef25be728e0c0eba1811893569a8eb2421269a4\";\nlet codeId=20729;\nlet contractAddress=\"secret19ttj98gk3ylmdg5gzrlt38rdtgslgyhrrxqcg4\"\nlet instantiate_contract = async (codeId,sender,contractCodeHash,init_msg,label) => {\n  // Create an instance of the Counter contract, providing a starting count\n  try{\n\n  const initMsg = { entropy: \"this \" };\n  let tx = await secretjs.tx.compute.instantiateContract(\n    {\n      code_id: codeId,\n      sender: sender,\n      code_hash: contractCodeHash,\n      init_msg: init_msg,\n      label: label ,\n    },\n    {\n      gasLimit: 400_000,\n    }\n  );\n\n  //Find the contract_address in the logs\n  //let arraylog1=tx.arrayLog;\n  const contractAddress = tx.arrayLog.find(\n    (log) => log.type === \"message\" && log.key === \"contract_address\"\n  ).value;\n  \n  \n  \n\n\n  console.log(contractAddress);\n  }\n  catch(err){\n  console.error(err);\n  }\n};\n//instantiate_contract();\n\n\n\n\n\n\nlet createCard = async () => {\n\n  const card_creation_tx = await secretjs.tx.compute.executeContract(\n    {\n      sender: wallet.address,\n      contract_address: contractAddress,\n      msg: {\n        create: {\n          card: {\n            name: \"DElete me\",\n            address: \"DElete me \",\n            phone: \"12345678953\",\n          },\n          index: 1,\n        },\n      },\n      code_hash: contractCodeHash,\n    },\n    { gasLimit: 100_000 }\n  );\n\n  console.log(card_creation_tx);\n};\n//createCard();\n\n\nlet burnContract = async () => {\n  let burn_contract = await secretjs.tx.compute.executeContract(\n    {\n      sender: wallet.address,\n      contract_address: contractAddress,\n      msg: {\n      burn:{\n       index:1\n       }\n      },\n      code_hash: contractCodeHash,\n    },\n    { gasLimit: 100_000 }\n  );\n\n  console.log(\n    burn_contract.arrayLog\n  );\n};\n\n//burnContract();\n\n\nlet createViewingKey = async () => {\n  let viewing_key_creation = await secretjs.tx.compute.executeContract(\n    {\n      sender: wallet.address,\n      contract_address: contractAddress,\n      msg: {\n        generate_viewing_key: {\n          index: 1,\n          reciever:wallet1.address\n          \n        },\n      },\n      code_hash: contractCodeHash,\n    },\n    { gasLimit: 100_000 }\n  );\n\n  console.log(\n    viewing_key_creation.arrayLog\n  );\n};\n//createViewingKey();\n\nlet deleteViewingKey =async () => {\n  let viewing_key_delete = await secretjs.tx.compute.executeContract(\n    {\n      sender: wallet.address,\n      contract_address: contractAddress,\n      msg: {\n        delete_key: {\n         \n          account:wallet1.address\n          \n        },\n      },\n      code_hash: contractCodeHash,\n    },\n    { gasLimit: 100_000 }\n  );\n\n  console.log(\n    viewing_key_delete.arrayLog\n  );\n};\n\n\n//deleteViewingKey();\n\n\n\n\nlet viewing_key=\"api_key_Uj0SCTkceMG+hoTVq8XkAoLZajaRdTf9t6q2/FmNRO4=\";\n\n\nlet queryCard = async () => {\nlet business_card_query_tx=await secretjs.query.compute.queryContract({\n\tcontract_address:contractAddress,\n\tquery:{\n\t\tget_card:{\n\t\t\twallet:wallet1.address,\n\t\t\tviewing_key:viewing_key,\n\t\t\tindex:1,\n\t\t\t\n\t\t},\n\t\t\n\t\n\t},\n\tcode_hash:contractCodeHash,\n\t\n});\nconsole.log(business_card_query_tx);\n  \n};\n//queryCard();\n\n\nlet bankTransfer = async () => {\nlet bank_tx = await secretjs.tx.bank.send(\n    {\n      amount: [{ amount: \"1000\", denom: \"uscrt\" }],\n      from_address: wallet.address,\n      to_address: wallet1.address, // Set recipient to sender for testing\n    },\n    {\n      gasLimit: 20_000,\n      gasPriceInFeeDenom: 0.25,\n      memo: \"send tokens \",\n    }\n  );\n\n  console.log(\"Transaction: \", bank_tx);\n};\n\nbankTransfer();\n\n\n\n//Get the codeInfo based on codeid\nconst codeInfo = await secretjs.query.compute.contractsByCodeId({code_id:\"20622\"});\n//console.log(codeInfo)\n\n// current doubts: viewing keys should be the owner to see the information, other people use the same key should not see the information ? ---- problem solve !\n\n",[],{"ruleId":"82","severity":1,"message":"83","line":9,"column":7,"nodeType":"84","messageId":"85","endLine":9,"endColumn":18},{"ruleId":"82","severity":1,"message":"86","line":19,"column":19,"nodeType":"84","messageId":"85","endLine":19,"endColumn":30},{"ruleId":"82","severity":1,"message":"87","line":29,"column":10,"nodeType":"84","messageId":"85","endLine":29,"endColumn":18},{"ruleId":"82","severity":1,"message":"88","line":29,"column":19,"nodeType":"84","messageId":"85","endLine":29,"endColumn":29},{"ruleId":"82","severity":1,"message":"89","line":30,"column":10,"nodeType":"84","messageId":"85","endLine":30,"endColumn":20},{"ruleId":"82","severity":1,"message":"90","line":30,"column":21,"nodeType":"84","messageId":"85","endLine":30,"endColumn":34},{"ruleId":"82","severity":1,"message":"91","line":31,"column":9,"nodeType":"84","messageId":"85","endLine":31,"endColumn":24},{"ruleId":"82","severity":1,"message":"92","line":4,"column":17,"nodeType":"84","messageId":"85","endLine":4,"endColumn":27},{"ruleId":"82","severity":1,"message":"93","line":5,"column":7,"nodeType":"84","messageId":"85","endLine":5,"endColumn":22},{"ruleId":"82","severity":1,"message":"94","line":6,"column":7,"nodeType":"84","messageId":"85","endLine":6,"endColumn":23},{"ruleId":"82","severity":1,"message":"95","line":1,"column":10,"nodeType":"84","messageId":"85","endLine":1,"endColumn":28},{"ruleId":"82","severity":1,"message":"96","line":14,"column":9,"nodeType":"84","messageId":"85","endLine":14,"endColumn":15},{"ruleId":"82","severity":1,"message":"97","line":39,"column":11,"nodeType":"84","messageId":"85","endLine":39,"endColumn":19},{"ruleId":"82","severity":1,"message":"98","line":40,"column":9,"nodeType":"84","messageId":"85","endLine":40,"endColumn":14},{"ruleId":"82","severity":1,"message":"99","line":74,"column":13,"nodeType":"84","messageId":"85","endLine":74,"endColumn":29},{"ruleId":"82","severity":1,"message":"100","line":19,"column":5,"nodeType":"84","messageId":"85","endLine":19,"endColumn":20},{"ruleId":"82","severity":1,"message":"96","line":56,"column":5,"nodeType":"84","messageId":"85","endLine":56,"endColumn":11},{"ruleId":"82","severity":1,"message":"101","line":58,"column":5,"nodeType":"84","messageId":"85","endLine":58,"endColumn":25},{"ruleId":"82","severity":1,"message":"102","line":62,"column":9,"nodeType":"84","messageId":"85","endLine":62,"endColumn":16},{"ruleId":"82","severity":1,"message":"103","line":99,"column":5,"nodeType":"84","messageId":"85","endLine":99,"endColumn":15},{"ruleId":"104","severity":2,"message":"105","line":103,"column":15,"nodeType":"84","messageId":"106","endLine":103,"endColumn":21},{"ruleId":"82","severity":1,"message":"107","line":125,"column":5,"nodeType":"84","messageId":"85","endLine":125,"endColumn":17},{"ruleId":"82","severity":1,"message":"108","line":148,"column":5,"nodeType":"84","messageId":"85","endLine":148,"endColumn":21},{"ruleId":"82","severity":1,"message":"109","line":171,"column":5,"nodeType":"84","messageId":"85","endLine":171,"endColumn":21},{"ruleId":"82","severity":1,"message":"110","line":202,"column":5,"nodeType":"84","messageId":"85","endLine":202,"endColumn":14},{"ruleId":"82","severity":1,"message":"111","line":246,"column":7,"nodeType":"84","messageId":"85","endLine":246,"endColumn":15},{"ruleId":"82","severity":1,"message":"100","line":19,"column":5,"nodeType":"84","messageId":"85","endLine":19,"endColumn":20},{"ruleId":"82","severity":1,"message":"96","line":56,"column":5,"nodeType":"84","messageId":"85","endLine":56,"endColumn":11},{"ruleId":"82","severity":1,"message":"101","line":58,"column":5,"nodeType":"84","messageId":"85","endLine":58,"endColumn":25},{"ruleId":"82","severity":1,"message":"102","line":62,"column":9,"nodeType":"84","messageId":"85","endLine":62,"endColumn":16},{"ruleId":"82","severity":1,"message":"103","line":99,"column":5,"nodeType":"84","messageId":"85","endLine":99,"endColumn":15},{"ruleId":"82","severity":1,"message":"107","line":125,"column":5,"nodeType":"84","messageId":"85","endLine":125,"endColumn":17},{"ruleId":"82","severity":1,"message":"108","line":148,"column":5,"nodeType":"84","messageId":"85","endLine":148,"endColumn":21},{"ruleId":"82","severity":1,"message":"109","line":171,"column":5,"nodeType":"84","messageId":"85","endLine":171,"endColumn":21},{"ruleId":"82","severity":1,"message":"110","line":202,"column":5,"nodeType":"84","messageId":"85","endLine":202,"endColumn":14},{"ruleId":"82","severity":1,"message":"111","line":246,"column":7,"nodeType":"84","messageId":"85","endLine":246,"endColumn":15},"no-unused-vars","'GRPCWEB_URL' is assigned a value but never used.","Identifier","unusedVar","'setSecretjs' is assigned a value but never used.","'wordshow' is assigned a value but never used.","'setWorshow' is assigned a value but never used.","'showpermit' is assigned a value but never used.","'setShowpermit' is assigned a value but never used.","'contrastAddress' is assigned a value but never used.","'setMyCards' is assigned a value but never used.","'contractAddress' is assigned a value but never used.","'contractCodeHash' is assigned a value but never used.","'MsgExecuteContract' is defined but never used.","'codeId' is assigned a value but never used.","'init_msg' is assigned a value but never used.","'label' is assigned a value but never used.","'card_creation_tx' is assigned a value but never used.","'upload_contract' is assigned a value but never used.","'instantiate_contract' is assigned a value but never used.","'initMsg' is assigned a value but never used.","'createCard' is assigned a value but never used.","no-undef","'sender' is not defined.","undef","'burnContract' is assigned a value but never used.","'createViewingKey' is assigned a value but never used.","'deleteViewingKey' is assigned a value but never used.","'queryCard' is assigned a value but never used.","'codeInfo' is assigned a value but never used."]